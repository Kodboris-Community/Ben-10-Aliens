name: CI/CD Pipeline and AWS Balancer
on:
  push:
    branches:
      - jaiye/gitaction-s3

jobs:
  build:
    name: Build Ben10 Image
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.JAIYE_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.JAIYE_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Ben10 ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-and-push
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ben10-account
      run: |
        echo "$ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_RUN_NUMBER}"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_RUN_NUMBER} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_RUN_NUMBER}
        echo "ECR_REGISTRY=$ECR_REGISTRY" >> ecr_registry.txt
    - name: Upload ECR Registry
      uses: actions/upload-artifact@v2
      with:
        name: ecr-registry
        path: ecr_registry.txt
  
  pilot-deploy:
    name: Deploy Ben10 to dev
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download ECR Registry
      uses: actions/download-artifact@v2
      with:
        name: ecr-registry
        path: .
    - name: Read ECR Registry
      run: |
        ECR_REGISTRY=$(cat ecr_registry.txt)
        echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
    - name: ssh login to Ben10 EC2 Instance
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.JAIYE_HOST }}
        username: ${{ secrets.VICTOR_USERNAME }}
        key: ${{ secrets.JAIYE_KEY }}
        port: ${{ secrets.PORT }}
        envs: GITHUB_TRIGGERING_ACTOR,GITHUB_RUN_NUMBER,ECR_REGISTRY,ECR_REPOSITORY,DIRECTORY,COMPOSE
        script: |
          echo "Environment Variables:"
          echo "GITHUB_TRIGGERING_ACTOR: $GITHUB_TRIGGERING_ACTOR"
          echo "GITHUB_RUN_NUMBER: $GITHUB_RUN_NUMBER"
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY: $ECR_REPOSITORY"
          echo "DIRECTORY: $DIRECTORY"
          echo "COMPOSE: $COMPOSE"
          
          echo  "$GITHUB_TRIGGERING_ACTOR -Deployment Initiated- \nPulling build artifact $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_RUN_NUMBER}"
          cd $DIRECTORY && yq -y -i '.services.web.image = "${ECR_REGISTRY}/${ECR_REPOSITORY}:${GITHUB_RUN_NUMBER}"' $COMPOSE && \
          docker compose up --build --force-recreate -d
          if [[ $? == 0 ]]; then
            echo "Deployment Successful!!!"
          else
            echo "Error!!!!! can not recreate service update"
            exit 1

